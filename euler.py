#sum = 0 
#for i in range(1,1000):
#	if (i%5==0) | (i%3 == 0):
#		sum+= i

#print sum

#a1=1
#a2=2

# sum=0 
# while a1<4000000:

# 	if a2%2==0:
# 		sum+=a2
# 		print(sum) 

# 	next = 2*a1+3*a2
# 	a1=a1+2*a2 
# 	a2=next
# print sum

#problem 3
# import math

# x=600851475143
# y=600851475143
# upperlimit=int(math.sqrt(x))

# prime_list=[2,3]
# i =5
# while i < upperlimit:
# 	if i%2==1:
# 		is_prime=1
# 		for j in prime_list:
# 			if i%j==0:
# 				is_prime=0

# 		if is_prime==1:
# 			prime_list.append(i)
# 			if x%i==0:
# 				#upperlimit=4*int(math.sqrt(y/i))
# 				#y=y/i
# 				print "found prime",i

# 	i=i+2
# print prime_list

#problem 4 

# import math
# for i in range (900,999):
# 	for j in range(900,999):
# 		x6=int(i*j/100000)
# 		x5=int(i*j/10000)%10
# 		x4=int(i*j/1000)%10
# 		x3=int(i*j/100)%10
# 		x2=int(i*j/10)%10
# 		x1=int(i*j%10)

# 		if (x1==x6) & (x2==x5) & (x3==x4):
# 			print "found the largest number",i*j,i,j
# 			break

#problem 5
# import math
# k=20
# sum=1
# root=int(math.sqrt(k))
# x=[]
# prime_list=[2,3,5,7,11,13,17,19]
# for i in range(0,len(prime_list)):
# 	j=root
# 	while math.pow(prime_list[i],j)>k:
# 		j=j-1
# 	x.append(j)
# 	print x

# 	sum = sum*math.pow(prime_list[i],x[i])

# print sum



#problem 6
# import math
# sum=0
# for i in range(1,101):
# 	for j in range(1,101):
# 		if i!=j:
# 			sum=sum+i*j

# print sum

#problem 7

# import math
# prime_list=[2,3]
# i=5
# while len(prime_list)<10002:
# 	is_prime=1
# 	for j in prime_list:
# 		if i%j==0:
# 			is_prime=0

# 	if is_prime==1:
# 		prime_list.append(i)
# 	i=i+2

# print prime_list

#problem 8
# x1=("73167176531330624919225119674426574742355349194934" 
# "96983520312774506326239578318016984801869478851843"
# "85861560789112949495459501737958331952853208805511"
# "12540698747158523863050715693290963295227443043557"
# "66896648950445244523161731856403098711121722383113"
# "62229893423380308135336276614282806444486645238749"
# "30358907296290491560440772390713810515859307960866"
# "70172427121883998797908792274921901699720888093776"
# "65727333001053367881220235421809751254540594752243"
# "52584907711670556013604839586446706324415722155397"
# "53697817977846174064955149290862569321978468622482"
# "83972241375657056057490261407972968652414535100474"
# "82166370484403199890008895243450658541227588666881"
# "16427171479924442928230863465674813919123162824586"
# "17866458359124566529476545682848912883142607690042"
# "24219022671055626321111109370544217506941658960408"
# "07198403850962455444362981230987879927244284909188"
# "84580156166097919133875499200524063689912560717606"
# "05886116467109405077541002256983155200055935729725"
# "71636269561882670428252483600823257530420752963450")

# MAX=0
# MAX13=0
# for i in range(0,len(x1)):
# 	x13=x1[i:i+13]
# 	if x13.find("0")!=-1:
# 		print "aport it has 0",x13
# 	else:
# 		tmpcalc=1
# 		for j in x13:
# 			tmpcalc= tmpcalc*int(j)
# 		print tmpcalc
# 		if tmpcalc>MAX:
# 			MAX=tmpcalc
# 			MAX13=x13

# print MAX," ",MAX13

#problem 9
# import math
# for i in range(1,997):
# 	for j in range(i+1,500):
# 		c=1000-i-j
# 		if math.pow(i,2)+math.pow(j,2)==math.pow(c,2):
# 			print i,j,c,i*j*c
#problem 11
# mat=[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
# [0, 0, 0, 8, 02, 22, 97, 38, 15, 00, 40, 00, 75, 04, 05, 07, 78, 52, 12, 50, 77, 91, 8, 0, 0, 0],
# [0, 0, 0, 49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 04, 56, 62, 00, 0, 0, 0],
# [0, 0, 0, 81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 03, 49, 13, 36, 65, 0, 0, 0],
# [0, 0, 0, 52, 70, 95, 23, 04, 60, 11, 42, 69, 24, 68, 56, 01, 32, 56, 71, 37, 02, 36, 91, 0, 0, 0],
# [0, 0, 0, 22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80, 0, 0, 0],
# [0, 0, 0, 24, 47, 32, 60, 99, 03, 45, 02, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50, 0, 0, 0],
# [0, 0, 0, 32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70, 0, 0, 0],
# [0, 0, 0, 67, 26, 20, 68, 02, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21, 0, 0, 0],
# [0, 0, 0, 24, 55, 58, 05, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72, 0, 0, 0],
# [0, 0, 0, 21, 36, 23, 9, 75, 00, 76, 44, 20, 45, 35, 14, 00, 61, 33, 97, 34, 31, 33, 95, 0, 0, 0],
# [0, 0, 0, 78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 03, 80, 04, 62, 16, 14, 9, 53, 56, 92, 0, 0, 0],
# [0, 0, 0, 16, 39, 05, 42, 96, 35, 31, 47, 55, 58, 88, 24, 00, 17, 54, 24, 36, 29, 85, 57, 0, 0, 0],
# [0, 0, 0, 86, 56, 00, 48, 35, 71, 89, 07, 05, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58, 0, 0, 0],
# [0, 0, 0, 19, 80, 81, 68, 05, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 04, 89, 55, 40, 0, 0, 0],
# [0, 0, 0, 04, 52, 8, 83, 97, 35, 99, 16, 07, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66, 0, 0, 0],
# [0, 0, 0, 88, 36, 68, 87, 57, 62, 20, 72, 03, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69, 0, 0, 0],
# [0, 0, 0, 04, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36, 0, 0, 0],
# [0, 0, 0, 20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 04, 36, 16, 0, 0, 0],
# [0, 0, 0, 20, 73, 35, 29, 78, 31, 90, 01, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 05, 54, 0, 0, 0],
# [0, 0, 0, 01, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 01, 89, 19, 67, 48, 0, 0, 0],
# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
# print len(mat),len(mat[0]),mat[0]
# tmp_list=[max(mat[i][j]*mat[i+1][j]*mat[i+2][j]*mat[i+3][j],mat[i][j]*mat[i][j+1]*mat[i][j+2]*mat[i][j+3],mat[i][j]*mat[i+1][j-1]*mat[i+2][j-2]*mat[i+3][j-3],mat[i][j]*mat[i+1][j+1]*mat[i+2][j+2]*mat[i+3][j+3]) for i in range(3,len(mat)-3) for j in range(3,len(mat[i])-3)]
# print tmp_list,max(tmp_list),tmp_list.index(max(tmp_list))
#problem 10
# import math
# prime_list=[2,3]
# i=5
# sum=5
# k=2000000
# while prime_list[-1]<k:
# 	is_prime=1
# 	for j in prime_list:
# 		if j<=math.sqrt(i):
# 			if i%j==0:
# 				is_prime=0
# 				break
# 		else:
# 			break

# 	if is_prime==1:
# 		prime_list.append(i)
# 		if i<k:
# 			sum=sum+i
# 	i=i+2

# print prime_list,sum

#problem 12
# import math
# prime_list=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101]

# def is_prime(num):
# 	global prime_list
# 	last_prime=prime_list[-1]
# 	while prime_list[-1]<=math.sqrt(last_prime):
# 		is_prime=1
# 		print prime_list,last_prime
# 		for j in prime_list:
# 			if last_prime%j==0:
# 				is_prime=0
# 				break

# 		if is_prime==1:
# 			prime_list.append(last_prime)
# 			print num,last_prime,prime_list
# 		last_prime=last_prime+2

# 	return
# tri_list=[1, 3, 6, 10, 15, 21, 28, 36, 45, 55]

# def first_prime(num):
# 	global prime_list
# 	last_prime=prime_list[-1]
# 	while prime_list[-1]<num:
# 		is_prime=1
# 		for j in prime_list:
# 			if j<=math.sqrt(last_prime):
# 				if last_prime%j==0:
# 					is_prime=0
# 					break
# 			else:
# 				break

# 		if is_prime==1:
# 			prime_list.append(last_prime)
# 		last_prime=last_prime+2
# 		#print num,last_prime,prime_list
# 	return prime_list[-1]


# found=False
# while not found:
# 	tmp_num=tri_list[len(tri_list)-1]
# 	tmp_list=[i for i in prime_list if tmp_num%i==0]
# 	if (len(tmp_list)>=2):
# 		tmp_list2=[]
# 		tmp_calc_pr=int(math.sqrt(tmp_num))
# 		tmp_prime = first_prime(tmp_calc_pr)
# 		#print tmp_list
# 		for j in range(1,tmp_prime):
# 			if tmp_num%j==0 and (j not in tmp_list2):
# 				tmp_list2.append(j)
# 				tmp_list2.append(int(tmp_num/j))
# 				if (tmp_num/j)<tmp_prime:
# 					tmp_prime=tmp_num/j
# 					print "found an optimization",tmp_num,j,tmp_num/j
# 				if (len(tmp_list2)>500):
# 					found= True
# 					tmp_list2.sort()
# 					print tmp_prime,j,tmp_list2,len(tmp_list2),len(tmp_list),tmp_prime
# 					break
# 		if found:
# 			break
# 	tri_list.append(tri_list[-1]+len(tri_list)+1)
# 	#print tri_list[-1],len(tri_list)
# print found

#problem 13
# import math
# tmp=[
# "37107287533902102798797998220837590246510135740250",
# "46376937677490009712648124896970078050417018260538",
# "74324986199524741059474233309513058123726617309629",
# "91942213363574161572522430563301811072406154908250",
# "23067588207539346171171980310421047513778063246676",
# "89261670696623633820136378418383684178734361726757",
# "28112879812849979408065481931592621691275889832738",
# "44274228917432520321923589422876796487670272189318",
# "47451445736001306439091167216856844588711603153276",
# "70386486105843025439939619828917593665686757934951",
# "62176457141856560629502157223196586755079324193331",
# "64906352462741904929101432445813822663347944758178",
# "92575867718337217661963751590579239728245598838407",
# "58203565325359399008402633568948830189458628227828",
# "80181199384826282014278194139940567587151170094390",
# "35398664372827112653829987240784473053190104293586",
# "86515506006295864861532075273371959191420517255829",
# "71693888707715466499115593487603532921714970056938",
# "54370070576826684624621495650076471787294438377604",
# "53282654108756828443191190634694037855217779295145",
# "36123272525000296071075082563815656710885258350721",
# "45876576172410976447339110607218265236877223636045",
# "17423706905851860660448207621209813287860733969412",
# "81142660418086830619328460811191061556940512689692",
# "51934325451728388641918047049293215058642563049483",
# "62467221648435076201727918039944693004732956340691",
# "15732444386908125794514089057706229429197107928209",
# "55037687525678773091862540744969844508330393682126",
# "18336384825330154686196124348767681297534375946515",
# "80386287592878490201521685554828717201219257766954",
# "78182833757993103614740356856449095527097864797581",
# "16726320100436897842553539920931837441497806860984",
# "48403098129077791799088218795327364475675590848030",
# "87086987551392711854517078544161852424320693150332",
# "59959406895756536782107074926966537676326235447210",
# "69793950679652694742597709739166693763042633987085",
# "41052684708299085211399427365734116182760315001271",
# "65378607361501080857009149939512557028198746004375",
# "35829035317434717326932123578154982629742552737307",
# "94953759765105305946966067683156574377167401875275",
# "88902802571733229619176668713819931811048770190271",
# "25267680276078003013678680992525463401061632866526",
# "36270218540497705585629946580636237993140746255962",
# "24074486908231174977792365466257246923322810917141",
# "91430288197103288597806669760892938638285025333403",
# "34413065578016127815921815005561868836468420090470",
# "23053081172816430487623791969842487255036638784583",
# "11487696932154902810424020138335124462181441773470",
# "63783299490636259666498587618221225225512486764533",
# "67720186971698544312419572409913959008952310058822",
# "95548255300263520781532296796249481641953868218774",
# "76085327132285723110424803456124867697064507995236",
# "37774242535411291684276865538926205024910326572967",
# "23701913275725675285653248258265463092207058596522",
# "29798860272258331913126375147341994889534765745501",
# "18495701454879288984856827726077713721403798879715",
# "38298203783031473527721580348144513491373226651381",
# "34829543829199918180278916522431027392251122869539",
# "40957953066405232632538044100059654939159879593635",
# "29746152185502371307642255121183693803580388584903",
# "41698116222072977186158236678424689157993532961922",
# "62467957194401269043877107275048102390895523597457",
# "23189706772547915061505504953922979530901129967519",
# "86188088225875314529584099251203829009407770775672",
# "11306739708304724483816533873502340845647058077308",
# "82959174767140363198008187129011875491310547126581",
# "97623331044818386269515456334926366572897563400500",
# "42846280183517070527831839425882145521227251250327",
# "55121603546981200581762165212827652751691296897789",
# "32238195734329339946437501907836945765883352399886",
# "75506164965184775180738168837861091527357929701337",
# "62177842752192623401942399639168044983993173312731",
# "32924185707147349566916674687634660915035914677504",
# "99518671430235219628894890102423325116913619626622",
# "73267460800591547471830798392868535206946944540724",
# "76841822524674417161514036427982273348055556214818",
# "97142617910342598647204516893989422179826088076852",
# "87783646182799346313767754307809363333018982642090",
# "10848802521674670883215120185883543223812876952786",
# "71329612474782464538636993009049310363619763878039",
# "62184073572399794223406235393808339651327408011116",
# "66627891981488087797941876876144230030984490851411",
# "60661826293682836764744779239180335110989069790714",
# "85786944089552990653640447425576083659976645795096",
# "66024396409905389607120198219976047599490197230297",
# "64913982680032973156037120041377903785566085089252",
# "16730939319872750275468906903707539413042652315011",
# "94809377245048795150954100921645863754710598436791",
# "78639167021187492431995700641917969777599028300699",
# "15368713711936614952811305876380278410754449733078",
# "40789923115535562561142322423255033685442488917353",
# "44889911501440648020369068063960672322193204149535",
# "41503128880339536053299340368006977710650566631954",
# "81234880673210146739058568557934581403627822703280",
# "82616570773948327592232845941706525094512325230608",
# "22918802058777319719839450180888072429661980811197",
# "77158542502016545090413245809786882778948721859617",
# "72107838435069186155435662884062257473692284509516",
# "20849603980134001723930671666823555245252804609722",
# "53503534226472524250874054075591789781264330331690"]
# tmp_10 = [int(x[0:13]) for x in tmp]
# print tmp_10
# result=sum(int(x[0:13]) for x in tmp)
# print str(result)[0:10]

#problem 14
# def f(x): 
# 	if x%2==0:
# 		return x/2
# 	else:
# 		return 3*x+1

# lis=[]
# cs=dict()
# for i in range(10,1000000):
# 	x=i
# 	count=1
# 	while x!=1 and x not in cs:
# 		x=f(x)
# 		count+=1
# 		if x in cs:
# 			count+=cs[x]
# 			break
# 	lis.append([count,i])
# 	cs[i]=count
# print max(lis)

#problem 15
# import math
# print math.factorial(40)/(math.factorial(20)*math.factorial(20))
# #problem 16
# x=2**1000
# sum=0
# while x>0:
# 	print x,x%10,sum
# 	sum+=x%10
# 	x=int(x/10)

# print sum
#problem 17
#(2n)!/n!n!

#problem 18

# tri=[
# [0, 75, 0],
# [0, 95, 64, 0],
# [0, 17, 47, 82, 0],
# [0, 18, 35, 87, 10, 0],
# [0, 20, 4 ,82 ,47 ,65 ,0],
# [0, 19, 1 ,23 ,75 ,03 ,34 ,0],
# [0, 88, 2 ,77 ,73 ,07 ,63 ,67 ,0],
# [0, 99, 65, 04, 28, 06, 16 ,70 ,92 ,0],
# [0, 41, 41, 26, 56, 83, 40, 80, 70 ,33 ,0],
# [0, 41, 48, 72, 33, 47, 32 ,37 ,16 ,94 ,29 ,0],
# [0, 53, 71, 44, 65, 25, 43 ,91 ,52 ,97 ,51 ,14 ,0],
# [0, 70, 11, 33, 28, 77, 73 ,17 ,78 ,39 ,68 ,17 ,57 ,0],
# [0, 91, 71, 52, 38, 17, 14 ,91 ,43 ,58 ,50 ,27 ,29 ,48 ,0],
# [0, 63, 66, 4 ,68 ,89 ,53 ,67 ,30 ,73 ,16 ,69 ,87 ,40 ,31 ,0],
# [0, 4 ,62 ,98 ,27 ,23 ,9 ,70 ,98 ,73 ,93 ,38 ,53 ,60 ,4 ,23 ,0]]
# for i in tri:
# 	print i

# for i in range(1,len(tri)):
# 	for j in range(1,len(tri[i])-1):
# 		tri[i][j] += max(tri[i-1][j],tri[i-1][j-1])
# print max(tri[-1])
# for i in tri:
# 	print i

#problem 20
# def mul(x,y): return x*y

# tmp = reduce(mul,range(1,100))
# print tmp,sum(int(i) for i in str(tmp))

#probelm 21
# import math

# def d(n):
# 	#return sum((i+int(n/i)) for i in range(2,int(math.sqrt(n)) + 1) if n%i==0 and i!=n/i)
# 	sum1=0
# 	#print n
# 	for i in range(2,int(math.sqrt(n)) + 1):
# 		if n%i==0 and i!=n/i:
# 			sum1=sum1+i+n/i
# 			#print n,i,n/i,sum1
# 	return sum1+1


# print sum(j for j in range(1,10000) if d(d(j))==j and j!=d(j))

#problem 25
"""
import math
x1=1
x2=1
count=2
while (x2<10**1000):
	tmp=x1+x2
	x1=x2
	x2=tmp
	#print x2
	count+=1
print x2,count,math.log(x2,1000)
"""

#problem 26
"""
max=0
for i in xrange(3,1001):
	start=1
	seqlen=0
	tmp_list=[0 for j in range(0,i)]
	while (tmp_list[start%i]==0) and (start!=0):
		tmp_list[start%i]=seqlen
		seqlen+=1
		start*=10

	if seqlen-tmp_list[start%i]>max:
		max=seqlen-tmp_list[start%i]
		print max,i
"""

#problem 27
"""
import math

prime_list=[2,3,5,7]
def f(a,b,x):
	return (x*x)+(a*x)+b


def is_prime(x):
	global prime_list
	if x in prime_list: return True
	for i in range(2,int(math.sqrt(abs(x)))):
		if x%i==0: return False

	prime_list.append(x)
	prime_list.sort()
	return True

max_pair=[0, 0, 0]
for i in xrange(-1000,1000):
	for j in xrange(-1000,1000):
		value=0
		while(is_prime(f(i,j,value))):
			value+=1
		
		if (max_pair[0]<=value):
			max_pair=[value, i, j]
			print max_pair
print max_pair
"""
#problem 28
"""
dim=5
value=1
sum1=1
for i in range(3,8,2):
	tmp=[j for j in range(value+1,value+(4*i)-3)]
	value=value+(4*i)-4
	start=int(len(tmp)/4)
	print tmp[start-1],tmp[2*start-1],tmp[3*start-1],tmp[4*start-1]
	sum1+=sum([tmp[start-1],tmp[2*start-1],tmp[3*start-1],tmp[4*start-1]])
	print tmp,len(tmp),value

print sum1
"""
#problem 29
#print len(set([i**j for i in range(2,101) for j in range(2,101)]))

#problem 30
"""
import itertools
tmp = [j for i in range(2,7) for j in itertools.product("0123456789", repeat=i) if sum(map(lambda x: int(x)**5,j))==int(reduce(lambda x,y:int(str(x)+str(y)),j))]
print sum(set([int(reduce(lambda x,y:x+y,j)) for j in [i for i in tmp if sum(map(lambda x: int(x),i))>1]]))
"""
#problem 31
"""
import time
start_time = time.time()

comb1=[1,2,5,10,20,50,100,200]
comb2={1:0,2:0,5:0,10:0,20:0,50:0,100:0,200:0}
def combi(comb,target):
	if(target>0) and comb:
		combination_with_x=combi(comb[1:],target)
		combination_without_x=[([comb[0]] + combin) for combin in combi(comb,target-comb[0])]
		return combination_without_x + combination_with_x
	else:
		if target==0:
			return [[]]
		else:
			return []


ways=[0 for x in range(0,201)]
ways[0]=1

for i in range(0,201):
	for j in range(0,201-i,2):
		for l in range(0,201-i-j,5):
			for m in range(0,201-i-j-l,10):
				for n in range(0,201-i-j-l-m,20):
					res+=len(combi(comb1,200-i-j-l-m-n))

for i in comb1:
	for j in range(i,201):
		ways[j]+=ways[j-i]

print ways[200]
print("--- %s seconds ---" % (time.time() - start_time))
"""
#problem 32
"""
import time
import math
start_time = time.time()

tmp=[]
sum1=0
for i in range(2,100):
	ibegin=0
	if i>9:
		ibegin= 123
	else: 
		ibegin= 1234
	iend=10000/(i+1)
	for j in range(ibegin,iend):
		stringl=[x for x in (str(i*j)+str(i)+str(j))]
		if len((str(i*j)+str(i)+str(j)))==9 and len(set(stringl))==9 and ('0' not in (str(i*j)+str(i)+str(j))) and (i*j not in [x[2] for x in tmp]):
				tmp.append([i,j,i*j])
				sum1+=i*j
print tmp,sum1
print("--- %s seconds ---" % (time.time() - start_time))
"""
"""
import time
import math
import itertools
start_time = time.time()
list1=[]
res=0
for j in range(3,10):
	for i in itertools.combinations_with_replacement([1,2,3,4,5,6,7,8,9],j):
		value=sum(map(math.factorial,i))
		if sum(map(lambda x: math.factorial(x),[int(y) for y in str(value)]))==value and len(str(value))==len(i):
			list1.append(value)
			print i
res=sum(list1)
print list1,res

print("--- %s seconds ---" % (time.time() - start_time))
"""
"""
import time
import math
import itertools
start_time = time.time()
prime_list=[2,3,5,7,11,13]
prime_list2=[7,11,13]

def is_prime(num):
	global prime_list
	if num in prime_list:
		return True
	else:
		if num%2==0:
			return False		
		for i in range(2,int(math.sqrt(num))):
			if num%i==0:
				return False
		prime_list.append(num)
		return True


for i in range(14,1000000):
	j=0
	res=True
	while prime_list[j]<=int(math.sqrt(i)):
		if i%prime_list[j]==0:
			res=False
			break
		j+=1
	if res:
		prime_list.append(i)
		#print i
		if len([x for x in ['0','2','4','5','6','8'] if x in str(i)])==0:
			prime_list2.append(i)

tri_prime_list=[2,3,5]
for i in prime_list2:
	if ('5' in str(i)) or ('2' in str(i)):
		continue
	i_premutation=[int(str(i)[x:]+str(i)[:x]) for x in range(1,len(str(i)))]
	res=True
	for j in i_premutation:
		res=res and (int(j) in prime_list2)
		print i,j,res
	if res:
		tri_prime_list.append(i)


print len(tri_prime_list)
print("--- %s seconds ---" % (time.time() - start_time))
"""
"""
import time
import math
import itertools
start_time = time.time()
def permut(str1):
	if len(str1)==0: return ""
	if len(str1)==1: return str1
	res=permut(str1[0:len(str1)-1])
	tmp_list=[]
	for i in res:
		print res
		for j in range(0,len(str1)):
			tmp=i[0:j]+str1[-1]+i[j:]
			print tmp
			tmp_list.append(tmp)
	return tmp_list

print set(permut("Granny"))
print("--- %s seconds ---" % (time.time() - start_time))
"""
#problem 36
"""
import time
import math
import itertools
start_time = time.time()
sum=0
list=[x for x in xrange(1,10)] + [int(str(j)+str(x)+str(j)) for x in range(0,10) for j in range(0,10)] + [int(str(j)+str(x)+str(y) + str(x) + str(j)) for x in range(0,10) for j in range(0,10) for y in range(0,10)]
for j in range(1,1000):
	list.append(int(str(j)+str(j)[::-1]))
list=set(list)
for i in list:
	if str(i)[0]=='0': continue
	b="{0:b}".format(i)
	if str(i)==str(i)[::-1] and b==b[::-1]:
		print i
		sum+=i
print sum
print("--- %s seconds ---" % (time.time() - start_time))
"""

"""
import time
import math
import itertools
start_time = time.time()
prime_list = {2:1,3:1,7:1}
def is_prime(num):
	if num==1: return False
	if prime_list.get(num)!=None:
		return True
	for j in range(2,int(math.sqrt(num)+1)):
		if num%j==0:
			return False
	#print num
	prime_list[num]=1
	return True

count=0
iterator=2
list_tr_prime=	[]
while count<11:
	for l in filter(lambda x: list(x)[0] not in ['9'] and list(x)[-1]!='9',itertools.product("123579",repeat=iterator)):
		i=''.join([x for x in l])
		#print l[0],l[-1],list(l)
		#print l[len(l)-1],i,count,list_tr_prime,prime_list

		if is_prime(int(i)):
			prime=True
			for x in range(1,len(i)):
				prime=prime and is_prime(int(i[x:])) and is_prime(int(i[0:x]))
				#is_prime(int(i[x:])) and is_prime(int(i[0:x]))
			if prime:
				list_tr_prime.append(int(i))
				count+=1
			#if int(i)==797: count=4
	iterator+=1
print(sum(list_tr_prime))


print("--- %s seconds ---" % (time.time() - start_time))

"""

import time
import math
import itertools
start_time = time.time()
#problem 38
"""
for i in range(9876,9000,-1):
	value=str(i)+str(i*2)
	ls=set([x for x in value])
	if len(ls)==9 and "0" not in ls:
		print value
"""
#problem 39
"""
max_ls=0
for i in range(1000,200,-2):
	list1C=0
	list1=[]
	for a in range(2,i/3):
		b=(((i-a)**2)-a**2)/(2*(i-a))
		if(i*(i-2*a) % (2*(i-a)) == 0):
			list1C+=1
		#print c
		#print i,a,b,c,list1C
	if list1C>=max_ls:
		max_ls=list1C
		print i,max_ls,list1
"""
#problem 40
"""
number_of_digits=9
counter=2
for i in [100,1000,10000,100000,1000000]:
	new_num_dig=(i-i/10)*counter
	number_of_digits+=new_num_dig
	calc_tmp=i-1-((number_of_digits-i)/counter)
	addmod=((number_of_digits-i)%counter)
	counter+=1
	print calc_tmp,addmod
"""
#problem 41
"""
def is_prime(num):
	for i in range(2,int(math.sqrt(num))+1):
		if num%i==0 : return False
	return True

list_num=[1,2,3,4,5,6,7]
print list_num
for j in itertools.permutations(list_num,7):
	tmp=int(reduce(lambda x,y:str(x)+str(y),[x for x in j]))
	if is_prime(tmp):
		print tmp
"""
#problem 42
"""
count=0
numbers=[0.5*x*(x+1) for x in range(1,30)]
f=file("words.txt","r")
lis=[i.rstrip('"')[1:] for i in f.readline().split(",")]
for j in lis:
	print j,sum([ord(x)-ord("A")+1 for x in j])
	if sum([ord(x)-ord("A")+1 for x in j]) in numbers:
		count+=1
print count
"""
#problem 43
"""
sum1=0
for i in itertools.permutations("0123456789",10):
	if i[0]=="0": continue
	tmp=reduce(lambda x,y:str(x)+str(y),[x for x in i])
	count=[0,2,3,5,7,11,13,17]
	found=True
	for j in range(1,8):
		if int(tmp[j:j+3])%count[j]!=0:
			found=False
			break
	if found:
		print tmp
		sum1+= int(tmp)
print sum1
"""
#s=")(((((()())()()))()(()))("

max_squence=0
def longestseq(s,depth):
    if len(s) in [0,1]: return 0,0,0
    stack=[]
    count=0
    max_squence=0
    i=0
    while i<len(s):
        if s[i]=="(" and len(stack)==0: stack.append("(")
        elif s[i]=="(":
            print "Nested Parcs Calling new M Handle",stack,s[i:]
            tmp_max,n_pos,tmp=longestseq(s[i:],depth+1)
            if tmp_max>max_squence:
                max_squence=tmp_max
            if tmp==0:
            	print "empty stack"
                while len(stack)!=0: pop_e=stack.pop()
            else:
				stack.append(tmp)
            print "Stack before Calling Nested Method after",stack,s[i:],i,n_pos,depth
            i+=n_pos
            print "Stack After Calling Nested Method after",stack,s[i:],i,n_pos,depth
            continue
        else:
            if len(stack)==0: 
                print "Stack is Empty, Closing Pracket",count,i,s[i:]
                if depth!=0: return max_squence,i,count
                count=0
                stack=[]
            else:
                pop_e=stack.pop()
                while len(stack)!=0 and pop_e!="(":
                    count+=pop_e
                    #i+=pop_e-1
                    pop_e=stack.pop()
                    
                count+=2
                print "Stack is not empty emptying stack DE",count,i,s[i:]
                if count>max_squence:
                    max_squence=count
        i+=1
    print max_squence
    return max_squence,i,count

s="(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((()())))(())()())((((()())((())))((()))()())))()(()()()(()((()))()()()))()()()(()()((((())()(((()(((())((()))()((()(()))()())))))))))())()())(()()))((()()()()())))((()()((((()()))))(())())()()))))(())()(()))((((((()))(()()()()(())(()((()))(()(())(((()()))(()((((()((((()((((())(())))()(())))()))(()((((((((())()()((())((()())()))))())())()(((((()()(((((())()((()(((()))(()(()))(()(()())))())(()((((()((()(((((()()))((()(()((())()))))(()(()())((()((()((((())))(()())()))()())())()))))(())))(())()((())(()(()))))()())(((()(()(((((((((()(()()())))((()((()())())())(((((()(()))))()))()))))()())()(()(())))(()))))(()))(((()))))())))))(((())((())((((()((()))((())))()))(((()))())()))()()()((()()(()())(()))()()((()())))))())(()())(((())))))())(())()))()())())(()(()((())((()(()((())(()()()(()((()(((()(())()(((())))))()())))))(()((((()(()()))(((())(()))(()()))))(())()((()))()))()()))()((())(()())())())(()))(()()(())()(()((((()())(((())(()()())())(()()))())))(()((())(()()))))(()))((()()((((()())(()()))()())()())))()(()((((())())()(())()))()()(()(()))))))(((()()((()))(()((((()()((())))())())))()())))())))((())()()()))()((()((()))()()())))(())())(()(()(()(()))())()))(())((())()())(((()()(((())(()()))(()())(())))()))(((()()()())))())))(((()))())())())))(((()))()())())())))))()()()()(())))(()())))(()()())))()((((()()()((((()))()())))(()))()))))(()())()))(((((())()((())()))(()())()()()())()(((()(()(())))))(()(((()()))((((()()))()))(((())(()(()))()(())))()()(()))))()))))()())))()))((((((((()()())((()(()()()(((())())())))()()(())(())))()())()())))((()))((((())()()))(())(((())(()()(((((()()((()()(((()(()()(((())()))))()(()())(()((((()()())(((()))(())((())()))))())))))(()()()())))()))(())((()())()())()()))(())))((()))()()((()())()()))(()()(())()())(())))((()(((())))()))))((((()))((())())())()(())(()))((((((())()()(((((()))()())(((()(()(())()((()())))(((())(()(())))))(()(()(((()))(())((((())))((())((((((((()(((((()(())))((((((())(()((((()(())()()((())())())((((((((()))))(((())()))()()))(())(())()()())(()()((())(()))())(((())(()((())(())(())))))(()(()(()()(((()()()))())(()))(())())()(((()((())((()())()(((((()()(()))))(((())()()))(()(()(()(()((())))))))(())())()))()(()(()))))()()((((())()())(((())(()))((()())(()((())()()(())((((())))))(())())())(())(()()(()()))(((()((((())(((())))))(()()()()(((()((((())(()))((())()))()(((((((()(()())))((()()(()()((())()))()(())))((()()((((()()()))((())()))((())(((()(()()()(((()((())((())()())())))((()))))))))))(())()()(((()()())))(((()))(()))))(((()(()())(()))(())((()))(((()(()()(((((((()())((((()))((((()(()())())()(((()(()((()))))))))))()()(((()()((((((((((())))))((((())())((()(((()())()))()()(((((())(()())())(((()((())((((((())(((())(((()(()(((((((()(())()())(()))))(()(((()))))))()))(((())))(()(()())()))(()()(()(()((()())()(())((()()((()()()(()(()()))(((((())()(()())()((()())()))(((((()((())()((()((((()(((())())(()()(())()(())(()(())))))(()())((()((()()()())(()))(()))))))(()((())(())((())()())()()))(()((()))(()()))()())(())(()()(()))((())()((())((((((())()(()()(((((())(()())())())()()(()())))))()))()((())((((((()())((()))))))((()(()()(((((((())))))))((()))(())(((()(()(())()()()()(()(())()))))))())()))()(((((()(())(((()))((()))()))()()(()(()((())(()))))()())((()())))))))(()()(()()))()((()(())()((())(()()))())((()())())()()))))((((()()()))())(())()())))()))()))))()))((()(()())()))()))(((()()()()())))())()))((()()())((()())))(((()((()()())(())))()(())(()(()(())(()(((((()()()(((())()())(()((()())(()(((()(())((((()())()(())))(((((((()))))())())))(()))()()(((()())(()))()())(())()))()((())()((())((()((())()())(()()))(((((()()()((((((((()(()((()()((((((()())))((((((())))())(()(()((((()(()())())()()))()((())())(()((((()(((()())((())))))(()())(()()()(()))()())()()))((()((()())(())()()()((())()()))))())()))())))(()))(()))()))((())()((()((()))))))())(((()))))))()(((()((())))((()())())()))((()(()(()(()))((()()))())))(()())))())(()))(())(())))))()(())(()()))()))((())))(()))(()))))(())()())(()(()))())(()(())(())))(()))())(()())))())(()())((()))()()((()(()()()(((((()((()((())(()())(())))()))))))(((())())))()((((()))()((()))())()))()))(()(()((()()())()()(((()))())))))()((((()()))))()))())))()())))(((((()(())))())(((()))((()))(((()(())())()((()(((()))()())))))((((()))()(()((((((()(()()()())(())((()))()(()()))))))()(((())))(())()())))))((()))(())()))))(()(((()()((())(()))))(((((()))))())))()(())(()(()))()))()))(()((())(()((()())()(((()))))())(())()(())))((())(()(((()))(((((()))(()))())))(()((((((())()((((())())()))((())))))())(()(())())))))()()(((())()())))))()))()())))()(())())(())()()()(((())))(())(((()))(()(((()()))())((()))(((()()()()())()()))(()))))()()))))(((()()))))()()(()()))()()()())())()((())(((()())(((())(()((()(((()(()())()()()(()((())(()()(()()()))))))()((()))))()(()))()))(())()()())))()()(((()))((()()(((()())))((()()())((())))))()())()((())))())(()())()()()()((())((()()())((()()))())(())())()(()(((()))())(()))))(()()))(())))))))()())()((()())()()))()())))((()()(()())()(()))((())()))(((())))())))(((()()())())("
longestseq(s,0)

#print pn
"""
for i in itertools.combinations(pn,2):
	if i[0]+i[1] in pn and abs(i[0]-i[1]) in pn:
		print i,abs(i[0]-i[1]),i[0]+i[1]"""


print("--- %s seconds ---" % (time.time() - start_time))

#problem 46
# import math

# def is_square(num):
# 	return num == int(math.sqrt(num))*int(math.sqrt(num))

# prime_list=[2,3]
# prime_list2=[1,2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101]
# i=5
# k=10000
# while prime_list[-1]<k:
# 	is_prime=1
# 	for j in prime_list:
# 		if j<=math.sqrt(i):
# 			if i%j==0:
# 				is_prime=0
# 				break
# 		else:
# 			break

# 	if is_prime==1:
# 		prime_list.append(i)
# 	i=i+2

# for i in xrange(5,10000,2):
# 	j=0
# 	while i>prime_list[j]:
# 		found=False
# 		tmp_num=i
# 		tmp_num-=prime_list[j]
# 		if tmp_num%2==0:
# 			tmp_num=tmp_num/2
# 			#print i,tmp_num,prime_list[j],is_square(tmp_num),math.sqrt(tmp_num)
# 			if is_square(tmp_num):
# 				found=True
# 				break
# 		j+=1
# 	if (not found) and (i not in prime_list):
# 		print i





#problem 47
# import math
# prime_list=[2,3]
# prime_list2=[1,2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101]
# i=5
# k=1000
# while prime_list[-1]<k:
# 	is_prime=1
# 	for j in prime_list:
# 		if j<=math.sqrt(i):
# 			if i%j==0:
# 				is_prime=0
# 				break
# 		else:
# 			break

# 	if is_prime==1:
# 		prime_list.append(i)
# 	i=i+2

# num1=[[210, 2, 3, 5, 7]]
# count=0
# for i in range(10000,1000000):
# 	tmp_i=i
# 	tmp_list=[i]
# 	for j in prime_list:
# 		while (tmp_i%j==0) and (tmp_i!=1):
# 			tmp_i=tmp_i/j
# 			if j not in tmp_list:
# 				tmp_list.append(j)
# 	if len(tmp_list)==5:
# 		#print tmp_list
# 		if tmp_list[0]==(num1[-1][0]+1):
# 			count+=1
# 			if (count==3):
# 				print "fin",num1
# 				break
# 		else:
# 			num1.remove(num1[-1])
# 			count=0
# 		num1.append(tmp_list)


#num1.sort()
#for i in range(0,len(num1)-2):
#	if (num1[i+1][0]==(num1[i][0])+1) and (num1[i+2][0]==(num1[i][0]+2)) and (num1[i+3][0]==(num1[i][0]+3)):
#		print num1[i]

#print num1


#problem 48
# import math 
# import time
# result=0
# modulo=10000000000
# for i in range(1,1001):
# 	temp=i
# 	for j in range(1,i):
# 		temp=i*temp
# 		temp=temp%modulo
# 	result=result+temp
# 	result=result%modulo



# s = 0 
# start = time.time()

# for i in range (1, 1001):
#     s += i**i

# string = str(s)
# end = time.time()

# print string[-10:]

# print result



#problem 49
# import math
# prime_list=[2,3]
# prime_list_4=[]
# def is_primefunc(number):
# 	is_prime_f=1
# 	for jl in prime_list:
# 		if jl<=math.sqrt(number):
# 			if number%jl==0:
# 				is_prime_f=0
# 				break
# 		else:
# 			break
# 	return is_prime_f

# k=10000
# i=5
# while prime_list[-1]<k:
# 	is_prime=1
# 	for j in prime_list:
# 		if j<=math.sqrt(i):
# 			if i%j==0:
# 				is_prime=0
# 				break
# 		else:
# 			break

# 	if is_prime==1:
# 		prime_list.append(i)
# 		if math.floor(i/1000)>0:
# 			prime_list_4.append(i)
# 	i=i+2
# pairs_list=[[]]
# for pl in prime_list_4:
# 	tmp_list_4=[pl]
# 	start=[int(x) for x in str(pl)]
# 	#print start
# 	for pli in prime_list_4:
# 		if pli in tmp_list_4:
# 			continue
# 		tmp_ele = [int(x) for x in str(pli)]
# 		for it1 in range(0,4):
# 			if start[it1] in tmp_ele:
# 				tmp_ele.remove(start[it1])
# 		if len(tmp_ele)==0:
# 			tmp_list_4.append(pli)
# 			prime_list_4.remove(pli)
# 			tmp_list_4.sort()
# 		if (len(tmp_list_4)>=3) & (tmp_list_4 not in pairs_list):
# 			pairs_list.append(tmp_list_4)
# 				#print tmp_list_4

# for ele in pairs_list:
# 	if len(ele)>=3:
# 		for i in range (1000,5001):
# 			if ((ele[1]+i) in ele) & ((ele[1]+(i*2)) in ele):
# 				print ele,i

#print len(pairs_list)
#problem 50
# import math 
# prime_list=[2,3]

# def is_primefunc(number):
# 	is_prime_f=1
# 	for jl in prime_list:
# 		if jl<=math.sqrt(number):
# 			if number%jl==0:
# 				is_prime_f=0
# 				break
# 		else:
# 			break
# 	return is_prime_f




# i=5
# k=1000000
# sum=0
# max=0
# while sum<k:
# 	is_prime=1
# 	for j in prime_list:
# 		if j<=math.sqrt(i):
# 			if i%j==0:
# 				is_prime=0
# 				break
# 		else:
# 			break

# 	if is_prime==1:
# 		prime_list.append(i)

# 		found=0
# 		sum=0
# 		m=0
# 		for l in reversed(prime_list):
# 			m=m+1
# 			sum=sum+l
# 			if (is_primefunc(sum)==1) & (max<m):
# 				print "found",prime_list,sum,m
# 				if max<m:
# 					max=m
# 				found=1
# 	i=i+2
# problem 67
# f = open('p067_triangle.txt','r')
# tri=f.read().splitlines()
# for i in range(0,len(tri)):
# 	tri[i]=tri[i].split(' ')
# 	tri[i].append('0')
# 	tri[i].insert(0,'0')
# 	for j in range(0,len(tri[i])):
# 		tri[i][j]=int(tri[i][j])
# 	print tri[i]

# for i in range(1,len(tri)):
# 	for j in range(1,len(tri[i])-1):
# 		tri[i][j] += max(tri[i-1][j],tri[i-1][j-1])

# print tri
# print max(tri[-1])



